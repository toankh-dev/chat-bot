services:
  # ChromaDB - Vector database
  chromadb:
    image: chromadb/chroma:0.4.24
    container_name: chatbot-chromadb
    ports:
      - "8001:8000"
    environment:
      - IS_PERSISTENT=TRUE
      - ANONYMIZED_TELEMETRY=FALSE
    volumes:
      - "./chromadb-data:/chroma/chroma"
    networks:
      - chatbot-network

  # PostgreSQL - Conversation history (optional)
  postgres:
    image: postgres:15-alpine
    container_name: chatbot-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=chatbot
      - POSTGRES_PASSWORD=chatbot123
      - POSTGRES_DB=chatbot
    volumes:
      - "./postgres-data:/var/lib/postgresql/data"
    networks:
      - chatbot-network

  # Redis - Caching (optional)
  redis:
    image: redis:7-alpine
    container_name: chatbot-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - "./redis-data:/data"
    networks:
      - chatbot-network

  # Main Application - FastAPI
  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: chatbot-app
    ports:
      - "8000:8000"
    environment:
      # Services
      - CHROMADB_HOST=chromadb
      - CHROMADB_PORT=8000

      # Database
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=chatbot
      - POSTGRES_USER=chatbot
      - POSTGRES_PASSWORD=chatbot123

      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379

      # App config
      - DEBUG=true
      - LOG_LEVEL=INFO
    volumes:
      - "./app:/app"
    depends_on:
      - chromadb
      - postgres
      - redis
    networks:
      - chatbot-network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Discord Bot - Listens to Discord messages and responds
  discord-bot:
    build:
      context: ./discord_bot
      dockerfile: Dockerfile
    container_name: chatbot-discord-bot
    environment:
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
      - DISCORD_CHANNEL_IDS=${DISCORD_CHANNEL_IDS}
      - CHATBOT_API_URL=http://app:8000/chat
    depends_on:
      - app
    networks:
      - chatbot-network
    restart: unless-stopped

networks:
  chatbot-network:
    driver: bridge

volumes:
  chromadb-data:
  postgres-data:
  redis-data:
